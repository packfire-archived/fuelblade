<?php
namespace Packfire\FuelBlade;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-24 at 14:30:39.
 */
class ContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Container
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Container;
        $this->object['test.value'] = 5;
        $this->object['test'] = function($c){
            return (object)array('value' => $c['test.value']);
        };
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Packfire\FuelBlade\Container::offsetExists
     */
    public function testOffsetExists()
    {
        $this->assertTrue($this->object->offsetExists('test.value'));
    }

    /**
     * @covers Packfire\FuelBlade\Container::offsetGet
     */
    public function testOffsetGet()
    {
        $this->assertEquals(5, $this->object->offsetGet('test.value'));
        $this->assertEquals(5, $this->object->offsetGet('test')->value);
    }

    /**
     * @covers Packfire\FuelBlade\Container::offsetSet
     */
    public function testOffsetSet()
    {
        $this->assertEquals(5, $this->object->offsetGet('test')->value);
        $this->object->offsetSet('test.value', 10);
        $this->assertEquals(10, $this->object->offsetGet('test')->value);
    }

    /**
     * @covers Packfire\FuelBlade\Container::offsetUnset
     */
    public function testOffsetUnset()
    {
        unset($this->object['test']);
        $this->assertArrayNotHasKey('test', $this->object);
    }

    /**
     * @covers Packfire\FuelBlade\Container::copy
     */
    public function testCopy()
    {
        $obj = (object)array(
            'text' => 'Hello there!'
        );
        
        $func = $this->object->copy($obj);
        $this->assertInstanceOf('\\stdClass', $func());
    }

    /**
     * @covers Packfire\FuelBlade\Container::func
     */
    public function testFunc()
    {
        $func = function(){
            return 'test';
        };
        
        $this->object['func'] = $this->object->func($func);
        $this->assertEquals($func, $this->object['func']);
    }

    /**
     * @covers Packfire\FuelBlade\Container::instance
     */
    public function testInstance()
    {
        $this->object['obj'] = $this->object->instance('\\stdClass');
        $this->assertInstanceOf('\\stdClass', $this->object['obj']);
        $obj1 = $this->object['obj'];
        $obj2 = $this->object['obj'];
        $this->assertTrue($obj2 !== $obj1);
    }

    /**
     * @covers Packfire\FuelBlade\Container::share
     */
    public function testShare()
    {
        $this->object['obj'] = $this->object->share(function(){
            return new \stdClass();
        });
        $this->assertInstanceOf('\\stdClass', $this->object['obj']);
        $obj1 = $this->object['obj'];
        $obj2 = $this->object['obj'];
        $this->assertTrue($obj2 === $obj1);
    }

    /**
     * @covers Packfire\FuelBlade\Container::value
     */
    public function testValue()
    {
        $this->assertInstanceOf('\\Closure', $this->object->value('test'));
        $this->assertEquals(5, $this->object->value('test.value'));
    }
}
